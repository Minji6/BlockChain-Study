도커 설치 방법

- yum 관리도구 설치
yum install -y yum-utils 

- 도커 관련 레포지토리 추가
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo

- 도커 설치
yum install docker-ce docker-ce-cli containerd.io

- 도커 시작 및 활성화
systemctl enable docker 
systemctl start docker

or

systemctl enable docker --now

- 도커 설치 및 시작 확인
systemctl status docker
docker --version

도커 명령어

- 도커허브에서 이미지 검색
docker search 이미지명

- 이미지 다운로드
docker pull 이미지명:태그

- 이미지 리스트 확인
docker image ls or docker images

- 이미지 ID 리스트 확인
docker image ls -q or docker images -q

- 이미지 삭제
docekr image rm [-f] 이미지명
=> -f 옵션은 컨테이너가 실행되었던 이미지 삭제시 

- 컨테이너가 실행되지 않았던 이미지 삭제
docker image prune --all

- 컨테이너가 실행되었던 이미지 삭제
docker image rm -f $(docker images -q)

- 이미지 백업

docker save -o 백업파일명 이미지명 이미지명 ....

- 이미지 백업 파일 해제

docker load -i 백업파일명

- 컨테이너 생성 및 실행
docker run [option] --name 컨테이너명 이미지:태그 command 
옵션
-it : 입력값과 출력값이 필요로 하는 컨테이너 경우에 붙임
-d : attach를 실행하지 않고 백그라운드로 실행만 시킬 경우에 붙임

- 컨테이너 list 확인
docker ps [-a]
-a : 종료된 컨테이너까지 확인

- 컨테이너 삭제
docker container rm [-f] 컨테이너명
-f : 실행되고 있는 컨테이너 삭제시 붙임

- 컨테이너 시작 및 정지
docker container start / stop 컨테이너명

- 컨테이너 및 이미지 스펙 확인
docker inspect 컨테이너명/이미지명

- 컨테이너 빠져나오기
ctrl p q 차례대로 입력

- 컨테이너 재진입
docker attach 컨테이너명

- 컨테이너 분리모드로 실행
docker exec -it 컨테이너명 실행명령어
=> -it 오는 경우는 shell 명령어 실행시

docker 설치 설정으로 스냅샷

ubuntu , mysql:5.7 , centos:7 , httpd 이미지 다운로드

  186  docker pull ubuntu
  187  docker pull mysql:5.7
  188  docker pull centos:7
  189  docker pull httpd

다운로드 이미지 확인

  190  docker images
  191  docker image ls

이미지들의 CMD 항목 확인

docker inspect ubuntu:latest | grep -A 4 Cmd
docker inspect mysql:5.7 | grep -A 4 Cmd
docker inspect centos:7 | grep -A 4 Cmd
docker inspect httpd | grep -A 4 Cmd

ubuntu 이미지 - 아카이브로 저장 
ubuntu  이미지 삭제 후 아카이브로 저장한 이미지 재설치

  192  docker save -o u.tar ubuntu:latest
  193  ls
  194  docker image rm ubuntu:latest
  195  docker image ls
  196  docker load -i u.tar
  197  docker image ls

해당 이미지들 이름은 차례로 os1, mydb, centos7 , web1 , web2 로 httpd만 2개 container 실행

  198  docker run -itd --name os1 ubuntu:latest
  199  docker run --name mydb -e MYSQL_ROOT_PASSWORD=1 -d -p 3306:3306 mysql:5.7
  200  docker run -itd --name centos7 centos:7
  201  docker run -d --name web1 httpd:latest
  202  docker run -d --name web2 httpd:latest
  203  docker ps -a

mysql:5.7 의 WorkingDir 확인

  204  docker inspect mydb | grep WorkingDir
  205  docker exec -it mydb sh

web1과web2의 아이피 주소 확인

  206  docker inspect web1 | grep IPA
  207  docker inspect web2 | grep IPA

web2 container 종료후 다시 시작해 볼 것

  208  docker stop web2
  209  docker ps -a
  210  docker start web2
  211  docker ps -a

mysql:5.7의 이미지를 container까지 삭제하시오.

  212  docker rm  mydb
  213  docker stop mydb
  214  docker rm  mydb
  215  docker image rm mysql:5.7

전체 container 확인 

  216  docker ps -a

ubuntu와 centos 의 백업본을 만들고 기존 이미지 삭제 백업을 이용해서 이미지를 다시 생성해보시오.

  217  docker save -o os.tar ubuntu:latest centos:7
  218  ls
  219  docker image rm -f ubuntu:latest centos:7
  220  docker images
  221  docker load -i os.tar
  222  docker images

ubuntu 와 centos 다시 container 실행

  224  docker run -itd --name os2 ubuntu:latest
  225  docker run -itd --name centos7_1 centos:7

ubuntu에 분리모드로 접속해서 /var/log/의 내용을 보도록 하시오.

  227  docker exec -it os1 bash
  # ls /var/log
  or
  docker exec os1 ls /var/log

web3 컨테이너를 생성
web3 의 웹페이지 내용 확인
curl web3의 IP주소

  228  docker run -d --name web3 httpd:latest
  229  docker inspect web3 | grep IPA
  230  curl 172.17.0.8