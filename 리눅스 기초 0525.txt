vimtutor 실행

vimtutor en

/root/vimtutor로 다른 저장하시오.

:w /root/vimtutor

vimtutor 종료 후

:q

/root/vimtutor 파일 vim 편집기로 실행

vim /root/vimtutor

1번 라인을 복사해서 3번 라인 아래에 붙여넣으시오.

1G or gg
yy
3G
p

or

: 1 co 3

vim 이라는 단어를 123 로 문서 전체를 변경하시오.

:% s/vim/123/g

1번부터 20번 사이에 123을 다시 vim으로 변경하시오.

:1,20 s/123/vim/g

2번라인부터 5번라인까지 복사해서 10번 라인에 붙여넣으시오.

2G
4 yy
10G
P

or

:2,5 co 9

1라인부터 10번라인을 잘라내서 마지막 라인 위로 붙여넣으시오.

1G or gg
10dd
G
P

or

:1,10 m 마지막라인 번호 윗 번호

30번 라인부터 40번 라인까지 삭제하시오.

30G
11dd

or

:30,40 d

1번 라인의 내용만 삭제하면서 123 이라는 단어를 쓰시오.

1G or gg
cc
123
esc

==================================================================

아카이브 실습

/usr/sbin 디렉토리를 일반 아카이브, gzip, bzip2, xz 로 아카이브 해보시오.
아카이브 파일명 sbin.tar

sbin.tar에 어떠한 파일들이 있는지 확인하시오.

sbin.tar를 /tmp에 해제 하시오.

===================================================================


/etc/passwd

계정명 : password(X) : UID : GID : 코멘트 : 홈디렉토리 : 로그인쉘

/etc/shadow

계정명 : 암호화된 패스워드 : lastchd : min : Max : warning : inactive : expire : blank

암호화된 패스워드

$해쉬알고리즘 종류(6-sha512) $salt값(패스워드를 변경할때 임의적으로 생성) $ 입력한 패스워드와 salt 값을 해쉬알고리즘으로 암호화한 값

/etc/group

그룹명 : 패스워드(X) : GID : 보조그룹 구성원

기본그룹                        보조그룹
1인1그룹                        0개 이상 가입 가능
계정생성시에 자동으로 설정      수동으로 설정

파일이나 디렉토리에 소유그룹의 권한을 행사하기 위해서 사용

사용자 전환
su       : 사용자로만 전환(위치나 일부 환경변수 기존 사용자 정보로 유지)
su -     : 전환되는 사용자의 모든 환경까지 가져옴.

su => 전환시에 해당 사용자의 password 필요
root로 전환시에 해당 password가 알려질 가능성이 있음.

sudo     : 일회성으로 root 권한을 가져올때 사용 
sudo -i  : su - root 처럼 root로 전환 시 사용

sudo => root password가 아닌 자신의 password 필요
sudo를 사용하기 위해서는 wheel 그룹에 속해있어야 함.
기본 그룹이든 보조 그룹이든 
wheel 그룹이 /etc/sudoers에 sudo를 사용할 수 있는 그룹으로 설정이 되어 있기 때문에 

사용자관리

사용자 생성에 따른 설정 파일 2가지

/etc/default/useradd

/etc/login.defs

============================================================

시스템의 유닛 확인

systemctl or systemctl list-units

-a or --all : 모든 유닛

-t or --type : 특정 유닛 지정

시스템 유닛의 활성화 상태 확인

systemctl list-unit-fils

활성화(enabled) => 부팅시에 자동으로 실행 되는지에 대한 여부

state

enabled - 부팅시에 실행됨
disabled - 부팅시에 실행 안됨
static - 부팅시 실행하지 않고 다른 유닛에 대해서 실행될 수 있도록 준비상태
masked - 실행되지 않도록 프리징시킴

유닛 제어 서브 커맨드

systemctl sub-command unit

status : 상태확인
start : 시작
stop : 종료
restart : 재시작
reload : 재설정
enable : 활성화
disable : 비활성화
mask : 마스크 설정
unmansk : 마스크 해제
list-dependencies : 종속성(의존성) 확인

특정 서비스를 설치하고 앞으로도 계속해서 해당 서비스를 실행 설정할 때

systemctl start xxxx.service
systemctl enable xxxx.service

or

systemctl enable xxxx.service --now


systemctl 실습

httpd 서비스 상태 확인

systemctl status httpd.service

httpd 서비스 시작

systemctl start httpd.service
systemctl status httpd.service

httpd 서비스 활성화

systemctl enable httpd.service
systemctl status httpd.service

httpd 서비스 중지

systemctl stop httpd.service
systemctl status httpd.service

httpd 서비스 비활성화

systemctl disable httpd.service
systemctl status httpd.service

httpd 서비스 잠금

systemctl mask httpd.service
systemctl status httpd.service
systemctl start httpd.service
에러 : 마스크 상태

httpd 서비스 잠금해제

systemctl unmask httpd.service
systemctl status httpd.service
systemctl start httpd.service
실행

httpd 서비스 시작 후에 pid 확인

systemctl status httpd.service
pid 확인

httpd 서비스 리로드 후 pid 확인

systemctl reload httpd.service
systemctl status httpd.service
pid 그대로임

httpd 서비스 재시작 후 pid 확인

systemctl restart httpd.service
systemctl status httpd.service
pid 바뀜


============================================================

네트워크 관리 명령어 정리

nmcli device : device 종류를 볼 수 있음.

nmcli connection show : connection 종류를 볼 수 있음

nmcli con show "con-name" : connection의 자세한 정보

nmcli con add 

: con-name   (== connection.id)          - 연결이름
: ifname     (== connection.interface)   - 연결할 인터페이스
: type       (== connection.type)        - 통신방식
: autoconnect(== connection.autoconnect) - 부팅시 자동연결 설정

------------유동IP 설정 가능(dhcp)----------

고정IP 설정인 경우에는 아래 내용 추가

:ip4         (== ipv4.addresses)   - ip주소 지정
:gw4         (== ipv4.gateway)     - 게이트웨이 주소 지정

ex)

nmcli con add con-name "connection 이름" ifname 물리 장치 type ethernet autoconnect yes => dhcp 설정

nmcli con add con-name "connection 이름" ifname 물리 장치 type ethernet autoconnect yes ip4 "xxx.xxx.xxx.xxx/xx" gw4 "xxx.xxx.xxx.xxx" => 고정 아이피 설정

nmcli con reload

nmcli con up "connection 이름" 

dhcp => 고정 아이피로 수정 한다고 했을 때

nmcli con mod dhcp(con-name) ipv4.addresses "할당 아이피주소/프리픽스" ipv4.gateway "게이트웨이주소" ipv4.method manual connection.id 바꿀 con-name connection.interface-name (new device)

호스트명 변경

hostnamectl set-hostname 호스트명

--------------------------------------------------------------------------

네트워크 실습

초기 설정으로 초기화

현재 IP 주소를  2가지 방법으로 확인해보시오.

ifconfig

ip addr

add로 연결 생성

dhcp => 유동IP

nmcli con add con-name dhcp ifname enp0s9 type ethernet autoconnect yes

nmcli con reload

nmcli con 

static1 => ip : 192.168.56.200/24, gw : 192.168.56.1 

nmcli con add con-name static1 ifname enp0s9 type ethernet autoconnect yes ip4 "192.168.56.200/24" gw4 "192.168.56.1"

nmcli con reload

nmcli con

modify 로 연결 수정

- dhcp 연결을 static 으로 이름 변경 후 
- 192.168.56.120으로 고정 아이피 설정
- 192.168.100.30 주소 추가
- 8.8.8.8 dns 설정 
- 자동 연결 안되도록 수정
- method maual 로 설정 후 네트워크 연결 확인

nmcli con mod dhcp connection.id static ipv4.method manual ipv4.addresses 192.168.56.120/24 +ipv4.addresses 192.168.56.30/24 ipv4.gateway 192.168.56.1 ipv4.dns 8.8.8.8 connection.autoconnect no 

nmcli con reload

nmcli con 

nmcli con up static

ip addr show enp0s9

192.168.56.200 주소를 제거하시오.

nmcli con mod static -ipv4.address 192.168.56.200/24 

nmcli con reload

nmcli con up static

ip addr show enp0s9

hostname을 encore으로 설정

hostnamectl set-hostname encore

hostname
